John Hodson
Christian Marin

Type Inference in Prolog
========================

This program emulates the type inference mechanism that is found in OCaml.

All necessary features have been implemented and are as follows:
1. More basic functions were to provide interesting code (the fType predicates)
2. More statement types were added. We covered:
    a. global variables with expression initialization (e.g. let x = 3)
    b. global function definitions (let add x y = x+y)
    c. expression computation (as a statement)
    d. if statements
    e. "let in" statement for local variables
    f. for statements
    g. code blocks (separated by ;)
    h. while statements (not specified or requested)
3. Write tests for all predicates especially infer (at least 20 cases).

We have included the test file, and in order to run the tests we have written,
start up a swipl session from the directory that the project is in and run
the following command in the prolog interpreter:

[typeInf], consult("typeInf.plt"), run_tests().

This command will load the typeInf.pl file, then the typeInf.plt file, and
then runs the tests.