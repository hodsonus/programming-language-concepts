###### 1. comments ######
/* block comments */
/*block comments*/
/**/
/* */
/*;*/
/*block;comments*/
/*
*/
/*;
*/
/*
;*/
/*
block comments
*/
/*
block
comments
*/

# inline comments
#inline comments
#; inline comments
#;inline comments
# inline comments;
#inline comments;
#;;
#



###### 2. literal arithmetic exps ######

# negative/double parsing
print "test: <-1.1>", " expected: <-1.1>", " observed: ", -1.1, "\n"

# numerical arithmetic
print "test: <1+2>", " expected: <3>", " observed: ", 1+2, "\n"
print "test: <1- -2>", " expected: <3>", " observed: ", 1- -2, "\n"
print "test: <1-2>", " expected: <-1>", " observed: ", 1-2, "\n"
print "test: <1*2>", " expected: <2>", " observed: ", 1*2, "\n"
print "test: <1/2>", " expected: <0.5>", " observed: ",1/2, "\n"
print "test: <2^2>", " expected: <4>", " observed: ", 2^2, "\n"
print "test: <10%20>", " expected: <10>", " observed: ", 10%20, "\n"



###### 2. variable arithmetic exps ######

# assignment
print "test: <x=3>", " expected: <3>", " observed: ", x=3, "\n"
print "test: <y=4>", " expected: <4>", " observed: ", y=4, "\n"

print "test: <x++>", " expected: <3>", " observed: ", x++, "\n"
print "test: <x-->", " expected: <4>", " observed: ", x--, "\n"
print "test: <++x>", " expected: <4>", " observed: ", ++x, "\n"
print "test: <--x>", " expected: <3>", " observed: ", --x, "\n"

# variable arithmetic
print "test: <-x>", " expected: <-3>", " observed: ",-x, "\n"
print "test: <x+y>", " expected: <7>", " observed: ",x+y, "\n"
print "test: <x-y>", " expected: <-1>", " observed: ",x-y, "\n"
print "test: <x*y>", " expected: <12>", " observed: ",x*y, "\n"
print "test: <x/y>", " expected: <0.75>", " observed: ",x/y, "\n"
print "test: <x^y>", " expected: <81>", " observed: ",x^y, "\n"
print "test: <x%y>", " expected: <3>", " observed: ",x%y, "\n"
print "test: <(x)>", " expected: <3>", " observed: ",(x), "\n"
print "test: <(y)>", " expected: <4>", " observed: ",(y), "\n"



###### 3. relational exps ######
# greater/less than
print "test: <1>2>", " expected: <0>", " observed: ", 1>2, "\n"
print "test: <2>1>", " expected: <1>", " observed: ", 2>1, "\n"
print "test: <1<2>", " expected: <1>", " observed: ", 1<2, "\n"
print "test: <2<1>", " expected: <0>", " observed: ", 2<1, "\n"

# greater/less than or equal to
print "test: <1>=2>", " expected: <0>", " observed: ", 1>=2, "\n"
print "test: <2>=1>", " expected: <1>", " observed: ", 2>=1, "\n"
print "test: <2>=2>", " expected: <1>", " observed: ", 2>=2, "\n"
print "test: <1<=2>", " expected: <1>", " observed: ", 1<=2, "\n"
print "test: <2<=1>", " expected: <0>", " observed: ", 2<=1, "\n"
print "test: <2<=2>", " expected: <1>", " observed: ", 2<=2, "\n"

# equality
print "test: <2==1>", " expected: <0>", " observed: ", 2==1, "\n"
print "test: <1==2>", " expected: <0>", " observed: ", 1==2, "\n"
print "test: <1==1>", " expected: <1>", " observed: ", 1==1, "\n"

# inequality
print "test: <1!=2>", " expected: <1>", " observed: ", 1!=2, "\n"
print "test: <2!=1>", " expected: <1>", " observed: ", 2!=1, "\n"
print "test: <1!=1>", " expected: <0>", " observed: ", 1!=1, "\n"

###### 3. boolean exps ######
# not
print "test: <!1>", " expected: <0>", " observed: ", !1, "\n"
print "test: <!2>", " expected: <0>", " observed: ", !2, "\n"
print "test: <!0>", " expected: <1>", " observed: ", !0, "\n"
print "test: <!!2>", " expected: <1>", " observed: ", !!2, "\n"

# and
print "test: <2&&3>", " expected: <1>", " observed: ", 2&&3, "\n"
print "test: <2&&0>", " expected: <0>", " observed: ", 2&&0, "\n"
print "test: <0&&3>", " expected: <0>", " observed: ", 0&&3, "\n"
print "test: <0&&0>", " expected: <0>", " observed: ", 0&&0, "\n"

# or
print "test: <2||3>", " expected: <1>", " observed: ", 2||3, "\n"
print "test: <0||3>", " expected: <1>", " observed: ", 0||3, "\n"
print "test: <2||0>", " expected: <1>", " observed: ", 2||0, "\n"
print "test: <0||0>", " expected: <0>", " observed: ", 0||0, "\n"



###### 4. precedence ######

print "test: <x=3&&1>", " expected: <1>", " observed: ", x=3&&1, "\n"
# division/multiplication before addition
print "test: <5/2+2*6>", " expected: <14.5>", " observed: ", 5/2+2*6, "\n"
# addition/subtraction after multiplication
print "test: <5+2*2-6>", " expected: <3>", " observed: ", 5+2*2-6, "\n"
# division/multiplication before subtraction
print "test: <5/2-2*6>", " expected: <-9.5>", " observed: ", 5/2-2*6, "\n"
# addition/subtraction after division
print "test: <5+2/2-6>", " expected: <0>", " observed: ", 5+2/2-6, "\n"
# mod before addition
print "test: <5%2-2%6>", " expected: <-1>", " observed: ", 5%2-2%6, "\n"
# mod before subtraction
print "test: <5%2+2%6 >", " expected: <3>", " observed: ", 5%2+2%6, "\n"
# addition/subtraction after mod
print "test: <5+2%2-6>", " expected: <-1>", " observed: ", 5+2%2-6, "\n"
# modulus/multiply left to right
print "test: <5%2*3>", " expected: <3>", " observed: ", 5%2*3, "\n"
# modulus/divide left to right
print "test: <5%2/3>", " expected: <0.333...>", " observed: ", 5%2/3, "\n"
# modulus/divide left to right
print "test: <5/2%3>", " expected: <2.5>", " observed: ", 5/2%3, "\n"
# serial multiply
print "test: <4*3*2>", " expected: <24>", " observed: ", 4*3*2, "\n"
# serial divide
print "test: <4/3/2>", " expected: <0.666...>", " observed: ", 4/3/2, "\n"
# serial mod
print "test: <5%3%2>", " expected: <0>", " observed: ", 5%3%2, "\n"
# exp before multiply
print "test: <2*2^3>", " expected: <16>", " observed: ", 2*2^3, "\n"
# serial exp, TODO
print "test: <4^3^2>", " expected: <262144>", " observed: ", 4^3^2, "\n"
# negative before exp
print "test: <-2^2>", " expected: <4>", " observed: ", -2^2, "\n"
# double negative
print "test: <- -2>", " expected: <2>", " observed: ", - -2, "\n"
# assignment first (0)
print "test: <3>x=4>", " expected: <0>", " observed: ", 3>x=4, "\n"
# complement last (1)
print "test: <!3>x=4>", " expected: <1>", " observed: ", !3>x=4, "\n"
# complement first (0)
print "test: <!4&&0>", " expected: <0>", " observed: ", !4&&0, "\n"
# complement first (1)
print "test: <!0||1>", " expected: <1>", " observed: ", !0||1, "\n"
# and priority
print "test: <1||1&&0>", " expected: <1>", " observed: ", 1||1&&0, "\n"
# or priority
print "test: <0&&1||1>", " expected: <1>", " observed: ", 0&&1||1, "\n"

###### 5. special exps ######
/* TODO, this prints after the read() fxn is executed, use the stack as discussed */
print "test: x=read()", " expected: <your user input>", " observed: ",x=read(), "\n"
print "test: x=2", " expected: <2>", " observed: ", x=2, "\n"
print "test: sqrt(x)", " expected: <1.414...>", " observed: ", sqrt(x), "\n"



###### 6. statements ######
# this entire test file



###### 7. math library ######
# sine, cosine, e^x, ln(x)
print "test: <s(1)>", " expected: <.84...>", " observed: ", s(1), "\n"
print "test: <c(1)>", " expected: <.54...>", " observed: ", c(1), "\n"
print "test: <l(3)>", " expected: <1.09...>", " observed: ", l(3), "\n"
print "test: <e(1)>", " expected: <2.71...>", " observed: ", e(1), "\n"
print "test: <e(l)>", " expected: <1.00...>", " observed: ", e(l), "\n"
#TODO, this returns -infinity instead of 1??
print "test: <l(e)>", " expected: <.99...>", " observed: ", l(e), "\n"