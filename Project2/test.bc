###### Part I - Simple BC Calculator ######

###### 1. comments ######
/* block comments */
/*block comments*/
/**/
/* */
/*;*/
/*block;comments*/
/*
*/
/*;
*/
/*
;*/
/*
block comments
*/
/*
block
comments
*/

# inline comments
#inline comments
#; inline comments
#;inline comments
# inline comments;
#inline comments;
#;;
#

###### 2. literal arithmetic exps ######
# negative/double parsing
print "test: <-1.1>", " expected: <-1.1>", " observed: ", -1.1

# numerical arithmetic
print "test: <1+2>", " expected: <3>", " observed: ", 1+2
print "test: <1- -2>", " expected: <3>", " observed: ", 1- -2
print "test: <1-2>", " expected: <-1>", " observed: ", 1-2
print "test: <1*2>", " expected: <2>", " observed: ", 1*2
print "test: <1/2>", " expected: <0.5>", " observed: ",1/2
print "test: <2^2>", " expected: <4>", " observed: ", 2^2
print "test: <10%20>", " expected: <10>", " observed: ", 10%20

###### 2. variable arithmetic exps ######
# assignment
print "test: <x=3>", " expected: <3>", " observed: ", x=3
print "test: <y=4>", " expected: <4>", " observed: ", y=4
print "test: <x++>", " expected: <3>", " observed: ", x++
print "test: <x-->", " expected: <4>", " observed: ", x--
print "test: <++x>", " expected: <4>", " observed: ", ++x
print "test: <--x>", " expected: <3>", " observed: ", --x
print "test: <x+=1>", " expected: <4>", " observed: ", x+=1
print "test: <x-=1>", " expected: <3>", " observed: ", x-=1
print "test: <x*=2>", " expected: <6>", " observed: ", x*=2
print "test: <x/=2>", " expected: <3>", " observed: ", x/=2

# variable arithmetic
print "test: <-x>", " expected: <-3>", " observed: ",-x
print "test: <x+y>", " expected: <7>", " observed: ",x+y
print "test: <x-y>", " expected: <-1>", " observed: ",x-y
print "test: <x*y>", " expected: <12>", " observed: ",x*y
print "test: <x/y>", " expected: <0.75>", " observed: ",x/y
print "test: <x^y>", " expected: <81>", " observed: ",x^y
print "test: <x%y>", " expected: <3>", " observed: ",x%y
print "test: <(x)>", " expected: <3>", " observed: ",(x)
print "test: <(y)>", " expected: <4>", " observed: ",(y)

###### 3. relational exps ######
# greater/less than
print "test: <1>2>", " expected: <0>", " observed: ", 1>2
print "test: <2>1>", " expected: <1>", " observed: ", 2>1
print "test: <1<2>", " expected: <1>", " observed: ", 1<2
print "test: <2<1>", " expected: <0>", " observed: ", 2<1

# greater/less than or equal to
print "test: <1>=2>", " expected: <0>", " observed: ", 1>=2
print "test: <2>=1>", " expected: <1>", " observed: ", 2>=1
print "test: <2>=2>", " expected: <1>", " observed: ", 2>=2
print "test: <1<=2>", " expected: <1>", " observed: ", 1<=2
print "test: <2<=1>", " expected: <0>", " observed: ", 2<=1
print "test: <2<=2>", " expected: <1>", " observed: ", 2<=2

# equality
print "test: <2==1>", " expected: <0>", " observed: ", 2==1
print "test: <1==2>", " expected: <0>", " observed: ", 1==2
print "test: <1==1>", " expected: <1>", " observed: ", 1==1

# inequality
print "test: <1!=2>", " expected: <1>", " observed: ", 1!=2
print "test: <2!=1>", " expected: <1>", " observed: ", 2!=1
print "test: <1!=1>", " expected: <0>", " observed: ", 1!=1

###### 3. boolean exps ######
# not
print "test: <!1>", " expected: <0>", " observed: ", !1
print "test: <!2>", " expected: <0>", " observed: ", !2
print "test: <!0>", " expected: <1>", " observed: ", !0
print "test: <!!2>", " expected: <1>", " observed: ", !!2

# and
print "test: <2&&3>", " expected: <1>", " observed: ", 2&&3
print "test: <2&&0>", " expected: <0>", " observed: ", 2&&0
print "test: <0&&3>", " expected: <0>", " observed: ", 0&&3
print "test: <0&&0>", " expected: <0>", " observed: ", 0&&0

# or
print "test: <2||3>", " expected: <1>", " observed: ", 2||3
print "test: <0||3>", " expected: <1>", " observed: ", 0||3
print "test: <2||0>", " expected: <1>", " observed: ", 2||0
print "test: <0||0>", " expected: <0>", " observed: ", 0||0

###### 4. precedence ######
print "test: <x=3&&1>", " expected: <1>", " observed: ", x=3&&1
# division/multiplication before addition
print "test: <5/2+2*6>", " expected: <14.5>", " observed: ", 5/2+2*6
# addition/subtraction after multiplication
print "test: <5+2*2-6>", " expected: <3>", " observed: ", 5+2*2-6
# division/multiplication before subtraction
print "test: <5/2-2*6>", " expected: <-9.5>", " observed: ", 5/2-2*6
# addition/subtraction after division
print "test: <5+2/2-6>", " expected: <0>", " observed: ", 5+2/2-6
# mod before addition
print "test: <5%2-2%6>", " expected: <-1>", " observed: ", 5%2-2%6
# mod before subtraction
print "test: <5%2+2%6 >", " expected: <3>", " observed: ", 5%2+2%6
# addition/subtraction after mod
print "test: <5+2%2-6>", " expected: <-1>", " observed: ", 5+2%2-6
# modulus/multiply left to right
print "test: <5%2*3>", " expected: <3>", " observed: ", 5%2*3
# modulus/divide left to right
print "test: <5%2/3>", " expected: <0.333...>", " observed: ", 5%2/3
# modulus/divide left to right
print "test: <5/2%3>", " expected: <2.5>", " observed: ", 5/2%3
# serial multiply
print "test: <4*3*2>", " expected: <24>", " observed: ", 4*3*2
# serial divide
print "test: <4/3/2>", " expected: <0.666...>", " observed: ", 4/3/2
# serial mod
print "test: <5%3%2>", " expected: <0>", " observed: ", 5%3%2
# exp before multiply
print "test: <2*2^3>", " expected: <16>", " observed: ", 2*2^3
# serial exp
print "test: <4^3^2>", " expected: <262144>", " observed: ", 4^3^2
# negative before exp
print "test: <-2^2>", " expected: <4>", " observed: ", -2^2
# double negative
print "test: <- -2>", " expected: <2>", " observed: ", - -2
# assignment first (0)
print "test: <3>x=4>", " expected: <0>", " observed: ", 3>x=4
# complement last (1)
print "test: <!3>x=4>", " expected: <1>", " observed: ", !3>x=4
# complement first (0)
print "test: <!4&&0>", " expected: <0>", " observed: ", !4&&0
# complement first (1)
print "test: <!0||1>", " expected: <1>", " observed: ", !0||1
# and priority
print "test: <1||1&&0>", " expected: <1>", " observed: ", 1||1&&0
# or priority
print "test: <0&&1||1>", " expected: <1>", " observed: ", 0&&1||1

###### 5. special exps ######
print "please enter a number to test read(): "
print "test: x=read()", " expected: <your user input>", " observed: ",x=read()
print "test: x=2", " expected: <2>", " observed: ", x=2
print "test: sqrt(x)", " expected: <1.414...>", " observed: ", sqrt(x)

###### 6. statements ######
# this entire test file

###### 7. math library ######
# sine, cosine, e^x, ln(x)
print "test: <s(1)>", " expected: <.84...>", " observed: ", s(1)
print "test: <c(1)>", " expected: <.54...>", " observed: ", c(1)
print "test: <l(3)>", " expected: <1.09...>", " observed: ", l(3)
print "test: <e(1)>", " expected: <2.71...>", " observed: ", e(1)
print "test: <e(l)>", " expected: <1.00...>", " observed: ", e(l)
print "test: <l(e(1))>", " expected: <.99...>", " observed: ", l(e(1))

print "test: <l(-1)>", " expected: <-inf/nan>", " observed: ", l(-1)
print "test: <sqrt(-100)>", " expected: <error/nan>", " observed: ", sqrt(-100)
print "test: <s(1000)>", " expected: <.82...>", " observed: ", s(1000)

###### Part II - BC Programming Language Features ######

###### 1. If-Then-Else ######


###### 2. While Loops ######


###### 3. For Loops ######


###### 4. User Defined Functions ######

