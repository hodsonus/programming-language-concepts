# while loop and user defined fxn test
define gcd(a, b) {
    while (b != 0) {
        if (a > b) {
            a = a-b;
        } else {
            b = b-a;
        }
    }
    return a;
}

# recursion test, has adequate depth
define factorial(a) {
    if (a <= 0) {
        return 1;
    } else {
        return a * factorial(a-1)
    }
}

gcd(10, 15) /* gcd(10,15) = 5 */
factorial(10) /* factorial(10) = 3628800 */

# for loop break and continue test
for (i=0; i < 100; i++) {
    i++
    if ((i % 2) == 0) continue
    if (i>=10) {
        break;
    }
    print "i: ", i
}

# while loop break test
x=0
while (x++<100) {
    if (x>=10) {
        break;
    }
    print "x: ", x
}

# nested loop test
for (i=0; i < 5; i++) {
    for (j=0; j < 5; j++) {
        print i,j
    }
}

# empty function params/return
define nothing() { return }
nothing()
define nothing() {}
nothing()
define nothing() return
nothing()

# empty while/for list
i = 5
while(i++<10) {}
for(i = 5; i < 10; i++) {}
if(1.0) {} else {}
if(0.0) {} else {}
if(0.0) {} else if(0.0) {} else {print "end"}
if(0.0) {} else if(1.0) {print "mid"} else {}
if(1.0) {print "first"} else if(0.0) {} else {}
if(1.0) {print "first"} else if(1.0) {} else {}
