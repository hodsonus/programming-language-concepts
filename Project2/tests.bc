###### Part I - Simple BC Calculator ######

###### 1. comments ######
/* block comments */
/*block comments*/
/**/
/* */
/*;*/
/*block;comments*/
/*
*/
/*;
*/
/*
;*/
/*
block comments
*/
/*
block
comments
*/

# inline comments
#inline comments
#; inline comments
#;inline comments
# inline comments;
#inline comments;
#;;
#

###### 2. literal arithmetic exps ######
# negative/double parsing
print "test: -1.1", " exp: -1.1", " obs: ", -1.1

# numerical arithmetic
print "test: 1+2", " exp: 3", " obs: ", 1+2
print "test: 1- -2", " exp: 3", " obs: ", 1- -2
print "test: 1-2", " exp: -1", " obs: ", 1-2
print "test: 1*2", " exp: 2", " obs: ", 1*2
print "test: 1/2", " exp: 0.5", " obs: ", 1/2
print "test: 2^2", " exp: 4", " obs: ", 2^2
print "test: 10%20", " exp: 10", " obs: ", 10%20

###### 2. variable arithmetic exps ######
# assignment
print "test: x=3", " exp: 3", " obs: ", x=3
print "test: y=4", " exp: 4", " obs: ", y=4
print "test: x++", " exp: 3", " obs: ", x++
print "test: x--", " exp: 4", " obs: ", x--
print "test: ++x", " exp: 4", " obs: ", ++x
print "test: --x", " exp: 3", " obs: ", --x
print "test: x+=1", " exp: 4", " obs: ", x+=1
print "test: x-=1", " exp: 3", " obs: ", x-=1
print "test: x*=2", " exp: 6", " obs: ", x*=2
print "test: x/=2", " exp: 3", " obs: ", x/=2

# variable arithmetic
print "test: -x", " exp: -3", " obs: ",-x
print "test: x+y", " exp: 7", " obs: ",x+y
print "test: x-y", " exp: -1", " obs: ",x-y
print "test: x*y", " exp: 12", " obs: ",x*y
print "test: x/y", " exp: 0.75", " obs: ",x/y
print "test: x^y", " exp: 81", " obs: ",x^y
print "test: x%y", " exp: 3", " obs: ",x%y
print "test: (x)", " exp: 3", " obs: ",(x)
print "test: (y)", " exp: 4", " obs: ",(y)

###### 3. relational exps ######
# greater/less than
print "test: 1>2", " exp: 0", " obs: ", 1>2
print "test: 2>1", " exp: 1", " obs: ", 2>1
print "test: 1<2", " exp: 1", " obs: ", 1<2
print "test: 2<1", " exp: 0", " obs: ", 2<1

# greater/less than or equal to
print "test: 1>=2", " exp: 0", " obs: ", 1>=2
print "test: 2>=1", " exp: 1", " obs: ", 2>=1
print "test: 2>=2", " exp: 1", " obs: ", 2>=2
print "test: 1<=2", " exp: 1", " obs: ", 1<=2
print "test: 2<=1", " exp: 0", " obs: ", 2<=1
print "test: 2<=2", " exp: 1", " obs: ", 2<=2

# equality
print "test: 2==1", " exp: 0", " obs: ", 2==1
print "test: 1==2", " exp: 0", " obs: ", 1==2
print "test: 1==1", " exp: 1", " obs: ", 1==1

# inequality
print "test: 1!=2", " exp: 1", " obs: ", 1!=2
print "test: 2!=1", " exp: 1", " obs: ", 2!=1
print "test: 1!=1", " exp: 0", " obs: ", 1!=1

###### 3. boolean exps ######
# not
print "test: !1", " exp: 0", " obs: ", !1
print "test: !2", " exp: 0", " obs: ", !2
print "test: !0", " exp: 1", " obs: ", !0
print "test: !!2", " exp: 1", " obs: ", !!2

# and
print "test: 2&&3", " exp: 1", " obs: ", 2&&3
print "test: 2&&0", " exp: 0", " obs: ", 2&&0
print "test: 0&&3", " exp: 0", " obs: ", 0&&3
print "test: 0&&0", " exp: 0", " obs: ", 0&&0

# or
print "test: 2||3", " exp: 1", " obs: ", 2||3
print "test: 0||3", " exp: 1", " obs: ", 0||3
print "test: 2||0", " exp: 1", " obs: ", 2||0
print "test: 0||0", " exp: 0", " obs: ", 0||0

###### 4. precedence ######
print "test: x=3&&1", " exp: 1", " obs: ", x=3&&1
# division/multiplication before addition
print "test: 5/2+2*6", " exp: 14.5", " obs: ", 5/2+2*6
# addition/subtraction after multiplication
print "test: 5+2*2-6", " exp: 3", " obs: ", 5+2*2-6
# division/multiplication before subtraction
print "test: 5/2-2*6", " exp: -9.5", " obs: ", 5/2-2*6
# addition/subtraction after division
print "test: 5+2/2-6", " exp: 0", " obs: ", 5+2/2-6
# mod before addition
print "test: 5%2-2%6", " exp: -1", " obs: ", 5%2-2%6
# mod before subtraction
print "test: 5%2+2%6", " exp: 3", " obs: ", 5%2+2%6
# addition/subtraction after mod
print "test: 5+2%2-6", " exp: -1", " obs: ", 5+2%2-6
# modulus/multiply left to right
print "test: 5%2*3", " exp: 3", " obs: ", 5%2*3
# modulus/divide left to right
print "test: 5%2/3", " exp: 0.333...", " obs: ", 5%2/3
# modulus/divide left to right
print "test: 5/2%3", " exp: 2.5", " obs: ", 5/2%3
# serial multiply
print "test: 4*3*2", " exp: 24", " obs: ", 4*3*2
# serial divide
print "test: 4/3/2", " exp: 0.666...", " obs: ", 4/3/2
# serial mod
print "test: 5%3%2", " exp: 0", " obs: ", 5%3%2
# exp before multiply
print "test: 2*2^3", " exp: 16", " obs: ", 2*2^3
# serial exp
print "test: 4^3^2", " exp: 262144", " obs: ", 4^3^2
# negative before exp
print "test: -2^2", " exp: 4", " obs: ", -2^2
# double negative
print "test: - -2", " exp: 2", " obs: ", - -2
# assignment first (0)
print "test: 3>x=4", " exp: 0", " obs: ", 3>x=4
# complement last (1)
print "test: !3>x=4", " exp: 1", " obs: ", !3>x=4
# complement first (0)
print "test: !4&&0", " exp: 0", " obs: ", !4&&0
# complement first (1)
print "test: !0||1", " exp: 1", " obs: ", !0||1
# and priority
print "test: 1||1&&0", " exp: 1", " obs: ", 1||1&&0
# or priority
print "test: 0&&1||1", " exp: 1", " obs: ", 0&&1||1

###### 5. special exps ######
#print "please enter a number to test read(): "
#print "test: x=read()", " exp: your user input", " obs: ", x=read()
#print "test: x=2", " exp: 2", " obs: ", x=2
#print "test: sqrt(x)", " exp: 1.414...", " obs: ", sqrt(x)

###### 6. statements ######
# this entire test file

###### 7. math library ######
# sine, cosine, e^x, ln(x)
print "test: s(1)", " exp: .84...", " obs: ", s(1)
print "test: c(1)", " exp: .54...", " obs: ", c(1)
print "test: l(3)", " exp: 1.09...", " obs: ", l(3)
print "test: e(1)", " exp: 2.71...", " obs: ", e(1)
print "test: e(l)", " exp: 1.00...", " obs: ", e(l)
print "test: l(e(1))", " exp: .99...", " obs: ", l(e(1))

print "test: l(-1)", " exp: -inf/nan", " obs: ", l(-1)
print "test: sqrt(-100)", " exp: error/nan", " obs: ", sqrt(-100)
print "test: s(1000)", " exp: .82...", " obs: ", s(1000)

###### Part II - BC Programming Language Features ######

###### 1. If-Then-Else ######
# sample
print "if statement test"
i=2
if (i == 1) {
    print "Yes! It's 1!"
} else if (i == 2) {
    print "Awwww! It's 2!"
} else {
    print "I don't know what this thing is!!"
}

# empty if/else list
if(1.0) {} else {}
if(0.0) {} else {}
if(0.0) {} else if(0.0) {} else {print "end"}
if(0.0) {} else if(1.0) {print "mid"} else {}
if(1.0) {print "first"} else if(0.0) {} else {}
if(1.0) {print "first"} else if(1.0) {} else {}

# if/else parsing test
if (1+2) 
{
    
    2+6
    
    
    2+2} else{


        ;;


        3+4;;
        3+6;
    }
3+4

if(1+1) {
2+2}

###### 2. While Loops ######
# sample
print "while loop test"
i=0
while (i < 10) {
    print "while: i is ",i
    i++
}

# while loop break test
x=0
while (x++<100) {
    if (x>=10) {
        break;
    }
    print "x: ", x
}
# empty while list
i = 5
while(i++<10) {}

# while loop parsing test
x = 2
while (x) 
{
x--
    ;;


    2+3;
    
4+6
};

###### 3. For Loops ######
# sample
print "for loop test"
for (i = 0; i < 5; i++) {
    print "for: i is ", i
}

# for loop break and continue test
for (i=0; i < 100; i++) {
    i++
    if ((i % 2) == 0) continue
    if (i>=10) {
        break;
    }
    print "i: ", i
}

# nested loop test
for (i=0; i < 5; i++) {
    for (j=0; j < 5; j++) {
        print i,j
    }
}

# empty for list
for(i = 5; i < 10; i++) {}

# for loop parsing test
x=6
for (2+2;x--;2+2){
    

2+2;

;;}


; 

###### 4. User Defined Functions ######

# while loop and user defined fxn test
define gcd(a, b) {
    while (b != 0) {
        if (a > b) {
            a = a-b;
        } else {
            b = b-a;
        }
    }
    return a;
}
gcd(10, 15) /* gcd(10,15) = 5 */

# recursion test, has adequate depth
define factorial(a) {
    if (a <= 0) {
        return 1;
    } else {
        return a * factorial(a-1)
    }
}
factorial(10) /* factorial(10) = 3628800 */

# empty function params/return
define nothing() { return }
nothing()
define nothing() {}
nothing()
define nothing() return
nothing()

# multiple params and print in function
define john(a, b, c) {
    d=a+b+c;
    return d}
define print_all(a,b,c) {
    print a,b,c
    return
}